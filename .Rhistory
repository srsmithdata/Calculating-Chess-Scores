##
## Players' data correspecds to the follow alignment/positional value: (where the 2nd "#" for the comment notation is the left edge of the file. So "Pair" is in position 2)
## Pair | Player Name                     |Total|Round|Round|Round|Round|Round|Round|Round|
## Num  | USCF ID / Rtg (Pre->Post)       | Pts |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
## Reading in data from file
ttbl1 = read.delim(file = ChsLocal, header = T, sep = '|', quote = '', stringsAsFactors = F, strip.white = T, skip = 1)
FrstRowNum <- seq.int(3, length(ttbl1[,1]), 3)
SecRowNum <- seq.int(4, length(ttbl1[,1]), 3)
## Splitting data by player row
ttbl2 <- data.frame(ttbl1[FrstRowNum,], ttbl1[SecRowNum,])
## Parsing fields that didn't have delimiters and had multiple data points
## We'll first delimit the 2nd row of the name field
#### Pull space locations to facilitate delimiting
SpBr <- data.frame(str_locate_all(string = ttbl2$Player.Name.1, ' ')[1])
StPosn <- as.vector(c(1, 15, 20, 24, 29))
EndPosn <- as.vector(c(8, 18, 21, 27, 30))
SpBrttbl2 <- data.frame(StPosn, EndPosn)
#### Pulling the parsed variables with a  for loop and entering them into a matrix:
####
ttbl3_PNMFull <- matrix(ncol = 5, nrow = length(ttbl2$Player.Name.1), byrow = T)
i <- 1
while( i < (1 + length(ttbl2$Player.Name.1)))
{
j <- 1
while(j < 6 )
{
ttbl3_PNMFull[i, j] <- substr(ttbl2$Player.Name.1[i], SpBrttbl2[j, 1], SpBrttbl2[j, 2])
j <- j + 1
}
i <- i + 1
}
#### Matrix of round data
TotRnd <- 7
RndCols <- TotRnd*3
TotPart <- length(ttbl2[,2])
ttbl3_Rnds <- matrix(ncol = RndCols, nrow = TotPart)
RndNm <- as.vector('')
for (iRnd in 1:7)
{
OldCol <- ttbl2[,iRnd + 3]
FirstCol <- iRnd*3 - 2
SecCol <- iRnd*3 - 1
ThrdCol <- iRnd*3
ttbl3_Rnds[,FirstCol] <- substring(OldCol, 1, 1)
ttbl3_Rnds[,SecCol] <- substring(OldCol, 3, 5)
## pulling the scores of the competitors
ttbl3_Rnds[,ThrdCol] <- ttbl3_PNMFull[ttbl3_Rnds[,SecCol] ,2]
RndNm <- as.vector(c(RndNm, paste("RndRlt", iRnd, collapse = ''), paste("RndOpp", iRnd, collapse = ''), paste("RndOppSc", iRnd, collapse = '')))
}
ttbl3_Rnds[,ThrdCol] <- ttbl3_PNMFull[as.integer(ttbl3_Rnds[,SecCol]) ,2]
RndNm <- as.vector('')
for (iRnd in 1:7)
{
OldCol <- ttbl2[,iRnd + 3]
FirstCol <- iRnd*3 - 2
SecCol <- iRnd*3 - 1
ThrdCol <- iRnd*3
ttbl3_Rnds[,FirstCol] <- substring(OldCol, 1, 1)
ttbl3_Rnds[,SecCol] <- substring(OldCol, 3, 5)
## pulling the scores of the competitors
ttbl3_Rnds[,ThrdCol] <- ttbl3_PNMFull[as.integer(ttbl3_Rnds[,SecCol]) ,2]
RndNm <- as.vector(c(RndNm, paste("RndRlt", iRnd, collapse = ''), paste("RndOpp", iRnd, collapse = ''), paste("RndOppSc", iRnd, collapse = '')))
}
ttbl3_Rnds
View(ttbl3_Rnds)
require(devtools)
require(rmarkdown)
require(knitr)
require(DBI)
require(xtable)
require(stringr)
require(XML)
require(RCurl)
require(tau)
require(graphics)
# require(RMySQL)
## Setting SQL variables
#MySQLDBdrv <- dbDriver("MySQL")
#MySQLcon <- dbConnect(MySQLDBdrv, user = "ricsmith", password = '666')
#MySQLdiscon <- dbDisconnect(MySQLcon)
#ChsSQL1_creatdb <- 'CREATE DATABASE IF NOT EXISTS Chess ;'
## The Data
ChsLocal <- 'https://raw.githubusercontent.com/srsmithdata/Calculating-Chess-Scores/master/tournamentinfo.txt'
## Importing data to R
## This code is based on the following spec. If the spec changes or does not conform, the code will give an error message and cancel out for the code to be revised.
##
## FILE SPEC:
## UTF-8 encoded file
## Headers in rows 1-4
## EOL indicator on every line
## Unit = player in 2 lines
## First player's first line is line 5
##
## Players' data correspecds to the follow alignment/positional value: (where the 2nd "#" for the comment notation is the left edge of the file. So "Pair" is in position 2)
## Pair | Player Name                     |Total|Round|Round|Round|Round|Round|Round|Round|
## Num  | USCF ID / Rtg (Pre->Post)       | Pts |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
## Reading in data from file
ttbl1 = read.delim(file = ChsLocal, header = T, sep = '|', quote = '', stringsAsFactors = F, strip.white = T, skip = 1)
FrstRowNum <- seq.int(3, length(ttbl1[,1]), 3)
SecRowNum <- seq.int(4, length(ttbl1[,1]), 3)
## Splitting data by player row
ttbl2 <- data.frame(ttbl1[FrstRowNum,], ttbl1[SecRowNum,])
## Parsing fields that didn't have delimiters and had multiple data points
## We'll first delimit the 2nd row of the name field
#### Pull space locations to facilitate delimiting
SpBr <- data.frame(str_locate_all(string = ttbl2$Player.Name.1, ' ')[1])
StPosn <- as.vector(c(1, 15, 20, 24, 29))
EndPosn <- as.vector(c(8, 18, 21, 27, 30))
SpBrttbl2 <- data.frame(StPosn, EndPosn)
#### Pulling the parsed variables with a  for loop and entering them into a matrix:
####
ttbl3_PNMFull <- matrix(ncol = 5, nrow = length(ttbl2$Player.Name.1), byrow = T)
i <- 1
while( i < (1 + length(ttbl2$Player.Name.1)))
{
j <- 1
while(j < 6 )
{
ttbl3_PNMFull[i, j] <- substr(ttbl2$Player.Name.1[i], SpBrttbl2[j, 1], SpBrttbl2[j, 2])
j <- j + 1
}
i <- i + 1
}
#### Matrix of round data
TotRnd <- 7
RndCols <- TotRnd*3
TotPart <- length(ttbl2[,2])
ttbl3_Rnds <- matrix(ncol = RndCols, nrow = TotPart)
RndNm <- as.vector('')
for (iRnd in 1:7)
{
OldCol <- ttbl2[,iRnd + 3]
FirstCol <- iRnd*3 - 2
SecCol <- iRnd*3 - 1
ThrdCol <- iRnd*3
ttbl3_Rnds[,FirstCol] <- substring(OldCol, 1, 1)
ttbl3_Rnds[,SecCol] <- substring(OldCol, 3, 5)
## pulling the scores of the competitors
ttbl3_Rnds[,ThrdCol] <- ttbl3_PNMFull[as.integer(ttbl3_Rnds[,SecCol]) ,2]
RndNm <- as.vector(c(RndNm, paste("RndRlt", iRnd, collapse = ''), paste("RndOpp", iRnd, collapse = ''), paste("RndOppSc", iRnd, collapse = '')))
}
i <- 1
while( i < (1 + length(ttbl2$Player.Name.1)))
{
j <- 1
while(j < 8 )
{
ttbl3_PNMFull[i, j] <- substr(ttbl2$Player.Name.1[i], SpBrttbl2[j, 1], SpBrttbl2[j, 2])
j <- j + 1
}
i <- i + 1
}
source('C:/CUNY/Class Material/607-Data Collection/Projects/Chess-Tournament-Calc-Data-Acq-607/Chess-WS.R', echo=TRUE)
View(ttbl3_PNMFull)
View(ttbl3_Rnds)
ttbl2[,12]
ttbl2[,3]
FullTbl <- data.frame( ttbl2[,1:2], ttbl2[,12], ttbl3_PNMFull[,1:5], ttbl2[,3], ttbl3_Rnds[,1:21])
View(FullTbl)
names(FullTbl)
as.vector(c("PlayerNbr", "PlayerName", "PlayerState", "USCF_ID", "Pre-Tourn_Rating", "Pre-Tourn_PSc", "Post-Tourn_Rating",  "Post-Tourn_PSc", "TotalPts", as.vector(RndNm) )
as.vector(c("PlayerNbr", "PlayerName", "PlayerState", "USCF_ID", "Pre-Tourn_Rating", "Pre-Tourn_PSc", "Post-Tourn_Rating",  "Post-Tourn_PSc", "TotalPts", as.vector(RndNm) ) )
names(FullTbl) <- as.vector(c("PlayerNbr", "PlayerName", "PlayerState", "USCF_ID", "Pre-Tourn_Rating", "Pre-Tourn_PSc", "Post-Tourn_Rating",  "Post-Tourn_PSc", "TotalPts", as.vector(RndNm[2:22]) ) )
OppScCol <- seq(13, 31, 3)
OppScCol
mean(as.integer(FullTbl[,OppScCol]))
mean(FullTbl[,OppScCol]))
mean(FullTbl[,OppScCol])
OppScCol <- seq(12, 33, 3)
mean(FullTbl[,OppScCol])
FullTbl[,OppScCol]
OppScCol <- seq(12, 30, 3)
mean(FullTbl[,OppScCol])
mean(as.integer(FullTbl[,OppScCol]))
mean(as.integer(unlist(FullTbl[,OppScCol])))
sum(as.integer(unlist(FullTbl[,OppScCol])))
FullTbl[,OppScCol]
sum(as.integer(FullTbl[,OppScCol]))
FullTbl[,OppScCol])
FullTbl[,OppScCol]
sum(FullTbl[,OppScCol])
FullTblNbr <- data.frame(FullTbl, stringsAsFactors = T)
sum(FullTblNbr[,OppScCol])
sum(ifelse(is.na(FullTblNbr[,OppScCol]),0,FullTblNbr[,OppScCol])
)
FullTblNbr[,OppScCol]
sum(FullTblNbr[1,OppScCol])
FullTblNbr[1,OppScCol]
as.integers(FullTblNbr[1,OppScCol])
as.integer(FullTblNbr[1,OppScCol])
coerce(from = FullTblNbr[1,OppScCol], to = integer)
as(from = FullTblNbr[1,OppScCol], to = integer)
as.data.frame(from = FullTblNbr[1,OppScCol], to = integer)
ttbl3_PNMFull
tttbl3_PNMFull[2] <- as.vector(c(as.integer(ttbl3_PNMFull[2])))
tttbl3_PNMFull <- as.vector(c(as.integer(ttbl3_PNMFull[2])))
tttbl3_PNMFull
tttbl3_PNMFull <- as.vector(c(as.integer(ttbl3_PNMFull[,2])))
tttbl3_PNMFull
require(devtools)
require(rmarkdown)
require(knitr)
require(DBI)
require(xtable)
require(stringr)
require(XML)
require(RCurl)
require(tau)
require(graphics)
# require(RMySQL)
## Setting SQL variables
#MySQLDBdrv <- dbDriver("MySQL")
#MySQLcon <- dbConnect(MySQLDBdrv, user = "ricsmith", password = '666')
#MySQLdiscon <- dbDisconnect(MySQLcon)
#ChsSQL1_creatdb <- 'CREATE DATABASE IF NOT EXISTS Chess ;'
## The Data
ChsLocal <- 'https://raw.githubusercontent.com/srsmithdata/Calculating-Chess-Scores/master/tournamentinfo.txt'
## Importing data to R
## This code is based on the following spec. If the spec changes or does not conform, the code will give an error message and cancel out for the code to be revised.
##
## FILE SPEC:
## UTF-8 encoded file
## Headers in rows 1-4
## EOL indicator on every line
## Unit = player in 2 lines
## First player's first line is line 5
##
## Players' data correspecds to the follow alignment/positional value: (where the 2nd "#" for the comment notation is the left edge of the file. So "Pair" is in position 2)
## Pair | Player Name                     |Total|Round|Round|Round|Round|Round|Round|Round|
## Num  | USCF ID / Rtg (Pre->Post)       | Pts |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
## Reading in data from file
ttbl1 = read.delim(file = ChsLocal, header = T, sep = '|', quote = '', stringsAsFactors = F, strip.white = T, skip = 1)
FrstRowNum <- seq.int(3, length(ttbl1[,1]), 3)
SecRowNum <- seq.int(4, length(ttbl1[,1]), 3)
## Splitting data by player row
ttbl2 <- data.frame(ttbl1[FrstRowNum,], ttbl1[SecRowNum,])
## Parsing fields that didn't have delimiters and had multiple data points
## We'll first delimit the 2nd row of the name field
#### Pull space locations to facilitate delimiting
SpBr <- data.frame(str_locate_all(string = ttbl2$Player.Name.1, ' ')[1])
StPosn <- as.vector(c(1, 15, 20, 24, 29))
EndPosn <- as.vector(c(8, 18, 21, 27, 30))
SpBrttbl2 <- data.frame(StPosn, EndPosn)
#### Pulling the parsed variables with a  for loop and entering them into a matrix:
####
ttbl3_PNMFull <- matrix(ncol = 5, nrow = length(ttbl2$Player.Name.1), byrow = T)
i <- 1
while( i < (1 + length(ttbl2$Player.Name.1)))
{
j <- 1
while(j < 6 )
{
ttbl3_PNMFull[i, j] <- substr(ttbl2$Player.Name.1[i], SpBrttbl2[j, 1], SpBrttbl2[j, 2])
j <- j + 1
}
i <- i + 1
}
tttbl3_PreR <- as.vector(c(as.integer(ttbl3_PNMFull[,2])))
tttbl3_PostR <- as.vector(c(as.integer(ttbl3_PNMFull[,4])))
ttbl3_PNMFull[,2] <- tttbl3_PreR
ttbl3_PNMFull[,4] <- tttbl3_PostR
#### Matrix of round data
TotRnd <- 7
RndCols <- TotRnd*3
TotPart <- length(ttbl2[,2])
ttbl3_Rnds <- matrix(ncol = RndCols, nrow = TotPart)
RndNm <- as.vector('')
for (iRnd in 1:7)
{
OldCol <- ttbl2[,iRnd + 3]
FirstCol <- iRnd*3 - 2
SecCol <- iRnd*3 - 1
ThrdCol <- iRnd*3
ttbl3_Rnds[,FirstCol] <- substring(OldCol, 1, 1)
ttbl3_Rnds[,SecCol] <- substring(OldCol, 3, 5)
## pulling the scores of the competitors
ttbl3_Rnds[,ThrdCol] <- ttbl3_PNMFull[as.integer(ttbl3_Rnds[,SecCol]) ,2]
RndNm <- as.vector(c(RndNm, paste("RndRlt", iRnd, collapse = ''), paste("RndOpp", iRnd, collapse = ''), paste("RndOppRat", iRnd, collapse = '')))
}
FullTbl <- data.frame( ttbl2[,1:2], ttbl2[,12], ttbl3_PNMFull[,1:5], ttbl2[,3], ttbl3_Rnds[,1:21])
names(FullTbl) <- as.vector(c("PlayerNbr", "PlayerName", "PlayerState", "USCF_ID", "Pre-Tourn_Rating", "Pre-Tourn_PSc", "Post-Tourn_Rating",  "Post-Tourn_PSc", "TotalPts", as.vector(RndNm[2:22]) ) )
head(FullTbl)
dim(FullTbl)
OppScCol <- seq(12, 30, 3)
OppScCol
sum(FullTbl[1,OppScCol])
FullTbl[1,12]
FullTbl[,12]
require(devtools)
require(rmarkdown)
require(knitr)
require(DBI)
require(xtable)
require(stringr)
require(XML)
require(RCurl)
require(tau)
require(graphics)
options(stringsAsFactors = F)
# require(RMySQL)
## Setting SQL variables
#MySQLDBdrv <- dbDriver("MySQL")
#MySQLcon <- dbConnect(MySQLDBdrv, user = "ricsmith", password = '666')
#MySQLdiscon <- dbDisconnect(MySQLcon)
#ChsSQL1_creatdb <- 'CREATE DATABASE IF NOT EXISTS Chess ;'
## The Data
ChsLocal <- 'https://raw.githubusercontent.com/srsmithdata/Calculating-Chess-Scores/master/tournamentinfo.txt'
## Importing data to R
## This code is based on the following spec. If the spec changes or does not conform, the code will give an error message and cancel out for the code to be revised.
##
## FILE SPEC:
## UTF-8 encoded file
## Headers in rows 1-4
## EOL indicator on every line
## Unit = player in 2 lines
## First player's first line is line 5
##
## Players' data correspecds to the follow alignment/positional value: (where the 2nd "#" for the comment notation is the left edge of the file. So "Pair" is in position 2)
## Pair | Player Name                     |Total|Round|Round|Round|Round|Round|Round|Round|
## Num  | USCF ID / Rtg (Pre->Post)       | Pts |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
## Reading in data from file
ttbl1 = read.delim(file = ChsLocal, header = T, sep = '|', quote = '', stringsAsFactors = F, strip.white = T, skip = 1)
FrstRowNum <- seq.int(3, length(ttbl1[,1]), 3)
SecRowNum <- seq.int(4, length(ttbl1[,1]), 3)
## Splitting data by player row
ttbl2 <- data.frame(ttbl1[FrstRowNum,], ttbl1[SecRowNum,])
## Parsing fields that didn't have delimiters and had multiple data points
## We'll first delimit the 2nd row of the name field
#### Pull space locations to facilitate delimiting
SpBr <- data.frame(str_locate_all(string = ttbl2$Player.Name.1, ' ')[1])
StPosn <- as.vector(c(1, 15, 20, 24, 29))
EndPosn <- as.vector(c(8, 18, 21, 27, 30))
SpBrttbl2 <- data.frame(StPosn, EndPosn)
#### Pulling the parsed variables with a  for loop and entering them into a matrix:
####
ttbl3_PNMFull <- matrix(ncol = 5, nrow = length(ttbl2$Player.Name.1), byrow = T)
i <- 1
while( i < (1 + length(ttbl2$Player.Name.1)))
{
j <- 1
while(j < 6 )
{
ttbl3_PNMFull[i, j] <- substr(ttbl2$Player.Name.1[i], SpBrttbl2[j, 1], SpBrttbl2[j, 2])
j <- j + 1
}
i <- i + 1
}
tttbl3_PreR <- as.vector(c(as.integer(ttbl3_PNMFull[,2])))
tttbl3_PostR <- as.vector(c(as.integer(ttbl3_PNMFull[,4])))
ttbl3_PNMFull[,2] <- tttbl3_PreR
ttbl3_PNMFull[,4] <- tttbl3_PostR
#### Matrix of round data
TotRnd <- 7
RndCols <- TotRnd*3
TotPart <- length(ttbl2[,2])
ttbl3_Rnds <- matrix(ncol = RndCols, nrow = TotPart)
RndNm <- as.vector('')
for (iRnd in 1:7)
{
OldCol <- ttbl2[,iRnd + 3]
FirstCol <- iRnd*3 - 2
SecCol <- iRnd*3 - 1
ThrdCol <- iRnd*3
ttbl3_Rnds[,FirstCol] <- substring(OldCol, 1, 1)
ttbl3_Rnds[,SecCol] <- substring(OldCol, 3, 5)
## pulling the scores of the competitors
ttbl3_Rnds[,ThrdCol] <- ttbl3_PNMFull[as.integer(ttbl3_Rnds[,SecCol]) ,2]
RndNm <- as.vector(c(RndNm, paste("RndRlt", iRnd, collapse = ''), paste("RndOpp", iRnd, collapse = ''), paste("RndOppRat", iRnd, collapse = '')))
}
FullTbl <- data.frame( ttbl2[,1:2], ttbl2[,12], ttbl3_PNMFull[,1:5], ttbl2[,3], ttbl3_Rnds[,1:21])
names(FullTbl) <- as.vector(c("PlayerNbr", "PlayerName", "PlayerState", "USCF_ID", "Pre-Tourn_Rating", "Pre-Tourn_PSc", "Post-Tourn_Rating",  "Post-Tourn_PSc", "TotalPts", as.vector(RndNm[2:22]) ) )
str(FullTbl)
FullTbl[12,1]
as.integer(FullTbl[12,1]
)
as.integer(FullTbl[13,1] )
as.integer(FullTbl[1,13] )
FullTbl[1, 13]
as.integer(FullTbl[1,12])
OppScCol
OppScCol <- seq(12, 30, 3)
OppScCol
as.integer(FullTbl[ 1, OppScCol ])
sum(as.integer(FullTbl[ 1, OppScCol ]))
mean(as.integer(FullTbl[ 1, OppScCol ]))
mean(as.integer(FullTbl[ , OppScCol ]))
mean(as.integer(as.vector((FullTbl[ , OppScCol ])))
)
FTColConv <- as.vector(as.integer(FullTbl[ ,OppScCol]))
FTColConv <- as.vector(as.integer(FullTbl[1 ,OppScCol]))
FTColConv
FTColConv <- as.vector(as.integer(FullTbl[1 ,OppScCol]))
mean(FTColConv)
i <- 1
while( i < 31)
{
CurrColNbr <- i*3 + 9
FullTbl[1 ,OppScCol] <- as.vector(as.integer(FullTbl[1 ,OppScCol]))
}
OppScCol <- seq(12, 30, 3)
i <- 1
while( i < 31)
{
CurrColNbr <- i*3 + 9
FullTbl[1 ,OppScCol] <- as.vector( as.integer( FullTbl[1 ,
OppScCol] ) )
}
OppScCol <- seq(12, 30, 3)
i <- 1
while( i < 31)
OppScCol <- seq(12, 30, 3)
i <- 1
while( i < 8)
{
CurrColNbr <- i*3 + 9
FullTbl[1 ,OppScCol] <- as.vector( as.integer( FullTbl[1 ,
OppScCol] ) )
i <- i + 1
}
FullTbl[1 ,OppScCol]
mean( FullTbl[1, OppScCol])
mean( FullTbl[1, 12], FullTbl[1, 15])
FullTbl[1, 12]
OppScCol <- seq(12, 30, 3)
i <- 1
while( i < 8)
{
CurrColNbr <- i*3 + 9
FullTbl[1, CurrColNbr] <- as.vector( as.integer( FullTbl[1, CurrColNbr] ) )
i <- i + 1
}
FullTbl[1, 12]
OppScCol <- seq(12, 30, 3)
i <- 1
while( i < 8)
{
CurrColNbr <- i*3 + 9
ScrNbr[1, CurrColNbr] <- as.vector( as.integer( FullTbl[1, CurrColNbr] ) )
i <- i + 1
}
ScrNbr <- matrix( nrow = length(FullTbl[,2]), ncol = 7)
i <- 1
while( i < 8)
{
CurrColNbr <- i*3 + 9
ScrNbr[1, CurrColNbr] <- as.vector( as.integer( FullTbl[1, CurrColNbr] ) )
i <- i + 1
}
ScrNbr <- matrix( nrow = length(FullTbl[,2]), ncol = 7)
OppScCol <- seq(12, 30, 3)
i <- 1
while( i < 8)
{
CurrColNbr <- i*3 + 9
ScrNbr[1, i] <- as.vector( as.integer( FullTbl[1, CurrColNbr] ) )
i <- i + 1
}
ScrNbr
ScrNbr <- matrix( nrow = length(FullTbl[,2]), ncol = 7)
OppScCol <- seq(12, 30, 3)
i <- 1
while( i < 8)
{
CurrColNbr <- i*3 + 9
ScrNbr[1, i] <- as.integer( FullTbl[1, CurrColNbr] )
i <- i + 1
}
ScrNbr
ScrNbr <- matrix( nrow = length(FullTbl[,2]), ncol = 7)
OppScCol <- seq(12, 30, 3)
FTbliRow <- seq(1:length(FullTbl[ , 1]) )
for( j in FTbliRow)
{
i <- 1
while( i < 8)
{
CurrColNbr <- i*3 + 9
ScrNbr[j, i] <- as.integer( FullTbl[j, CurrColNbr] )
i <- i + 1
}
ScrNbr
ScrNbr[1,]
mean( ScrNbr[1,])
ScrNbr[1:64,]
mean( ScrNbr[1:64,])
colMeans( ScrNbr[1:64,])
colMeans( ScrNbr[,1:7])
rowMeans( ScrNbr)
ScrNbr <- ifelse( is.na(ScrNbr[,]), 0, ScrNbr)
ScrNbr
ScrNbr <- ifelse( is.na(ScrNbr[,]), 0, ScrNbr)
SumComp <- as.vector(rowsum(ScrNbr))
rowsum(ScrNbr)
ScrNbr
rowsum(ScrNbr)
ScrNbr <- matrix( nrow = length(FullTbl[,2]), ncol = 7)
OppScCol <- seq(12, 30, 3)
FTbliRow <- seq(1:length(FullTbl[ , 1]) )
for( j in FTbliRow)
{
i <- 1
while( i < 8)
{
CurrColNbr <- i*3 + 9
ScrNbr[j, i] <- as.integer( FullTbl[j, CurrColNbr] )
i <- i + 1
}
rowMeans(ScrNbr, na.rm = T)
FullTbl <- data.frame(FullTbl, AvgCompSc)
AvgCompSc <- rowMeans(ScrNbr, na.rm = T)
FullTbl <- data.frame(FullTbl, AvgCompSc)
FullTbl
